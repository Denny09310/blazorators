// Copyright (c) David Pine. All rights reserved.
// Licensed under the MIT License.

using Blazor.SourceGenerators.Options;
using Blazor.SourceGenerators.TypeScript.Types;

namespace Blazor.SourceGenerators.Builders;

[DebuggerDisplay("{ToSourceCodeString()}", Name = "{_options.TypeName}")]
internal sealed class NodeToSourceBuilder
{
    private const string NewLine = "\r\n";
    private const string TwoNewLines = $"{NewLine}{NewLine}";

    private readonly StringBuilder _builder = new();
    private readonly bool _isService;
    private readonly GeneratorOptions _options;
    private readonly RootNodeSourceFile _rootNode;
    private Indentation _indentation = new(0);

    internal NodeToSourceBuilder(GeneratorOptions options, RootNodeSourceFile rootNode, bool isService = true)
    {
        _options = options;
        _rootNode = rootNode;
        _isService = isService;
    }

    internal NodeToSourceBuilder AppendCopyRightHeader()
    {
        _builder.Append($"// Copyright (c) David Pine. All rights reserved.{NewLine}")
                .Append($"// Licensed under the MIT License:{NewLine}")
                .Append($"// https://bit.ly/blazorators-license{NewLine}")
                .Append($"// Auto-generated by blazorators.{TwoNewLines}");
        return this;
    }

    internal NodeToSourceBuilder DecreaseIndentation()
    {
        AdjustIndentation(IndentationAdjustment.Decrease);
        return this;
    }

    internal NodeToSourceBuilder ResetIndentiationTo(int level)
    {
        _indentation = _indentation.ResetTo(level);
        return this;
    }

    private void IncreaseIndentationImpl(bool increaseIndentation = false) =>
        AdjustIndentation(increaseIndentation
            ? IndentationAdjustment.Increase
            : IndentationAdjustment.NoOp);

    private void DecreaseIndentationImpl(bool decreaseIndentation = false) =>
        AdjustIndentation(decreaseIndentation
            ? IndentationAdjustment.Decrease
            : IndentationAdjustment.NoOp);

    private void AdjustIndentation(IndentationAdjustment adjustment)
    {
        _indentation = adjustment switch
        {
            IndentationAdjustment.Increase => _indentation.Increase(),
            IndentationAdjustment.Decrease => _indentation.Decrease(),
            _ => _indentation
        };
    }
}